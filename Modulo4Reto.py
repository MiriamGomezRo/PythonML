# -*- coding: utf-8 -*-
"""M4_Enunciados Reto.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19NZXhSy8azXqU9bk_AmML0bm3-kfkb4I

**MÓDULO 4 - PLATAFORMAS DE VISUALIZACIÓN**

---

**SESIÓN: Aplica en el trabajo**

NOMBRE: Miriam Guadalupe Gomez Rodriguez

1.	Genera una libreta en Google Colab para el reto, cuya estructura esté basada en los análisis solicitados.
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

from google.colab import drive
drive.mount('/content/gdrive')

"""
2.	Descarga el archivo: Employees.csv y guarda, en un dataframe (`employees`), todos sus registros."""

employees =  pd.read_csv('/content/gdrive/MyDrive/Colab Notebooks/Modulo 4/Reto/Employees.csv')
employees

"""3.	Observa la estructura y contenido del dataframe con los atributos y métodos estudiados (`shape`, `columns`, `head()`, `dtypes`, `isna()`)"""

employees.shape

employees.columns

employees.head()

employees.dtypes

"""

```
# Tiene formato de código
```

4.	Calcula el % total de valores faltantes y elimina los registros que contengan `NaN`"""

employees.isna().mean().sum()

"""borrando informacion de AGE, Time_Of_service ,Work_Life_balance y Pay_Scale"""

employees.dropna(inplace=True)
employees.isna().mean().sum()
#employees.dropna(axis=0,subset=['Age'],inplace=True)
#employees.dropna(axis=0,subset=['Time_of_service'],inplace=True)
#employees.dropna(axis=0,subset=['Work_Life_balance'],inplace=True)
#employees.dropna(axis=0,subset=['Pay_Scale'],inplace=True)
#employees.isna().sum()

"""5.	Obtén la cantidad de valores únicos por columna, para responder:
*  ¿Cuántos niveles educativos hay?5
*  ¿Cuántas ciudades participaron en el estudio?5

"""

employees.nunique()

"""6.	Realiza el conteo de valores por categoría (`value_counts()`) para las columnas de género y estado civil"""

employees["Relationship_Status"].value_counts()

employees["Gender"].value_counts()

"""7.	A través de la función `describe()` responde:
*  ¿Cuál es el tiempo máximo de servicio? R= 43.000000
*  ¿Qué promedio de edad tienen los empleados encuestados?R=39.577025
*  ¿Cuál es el valor del 1er cuartil en la escala de pago?R= 5.000000


"""

employees.describe()

"""8.	Elabora en un histograma con las edades para identificar el rango más común."""

sns.histplot(employees['Age'], bins=[10, 20, 30, 40, 50, 60,70])

"""9.	Construye un gráfico de frecuencias (o conteo) para las unidades funcionales (`Unit`). ¿En qué unidad hay mayor número de empleados?"""

sns.countplot(employees['Unit'])
plt.xticks(rotation=90)

"""10.	Realiza una agrupación por ciudad, con el promedio de todas las columnas y almacena el resultado en un nuevo dataframe (`employees_by_hometown`)."""

employees_by_hometown= employees[['Hometown','Age', 'Education_Level','Time_of_service','Time_since_promotion','growth_rate','Travel_Rate','Post_Level','Pay_Scale','Work_Life_balance','Attrition_rate']].groupby(['Hometown']).mean()
employees_by_hometown

"""11.	Visualiza el dataframe obtenido en una única gráfica (usando Pandas: `employees_by_hometown.plot()`). Como no es legible por la diferencia de escalas en las columnas, sepáralas en subplots. ¿Qué ciudad tiene el mayor índice de deserción? Observa el resto de sus variables"""

fig, axs = plt.subplots(4,3,figsize=(30,30))
plt.subplots_adjust(hspace=0.5)
axs[0,0].plot(employees_by_hometown['Age'])
axs[0,0].set_title("Age")

axs[0,1].plot(employees_by_hometown['Education_Level'])
axs[0,1].set_title("Education_Level")

axs[0,2].plot(employees_by_hometown['Time_of_service'])
axs[0,2].set_title("Time_of_service")

axs[1,0].plot(employees_by_hometown['Time_since_promotion'])
axs[1,0].set_title("Time_since_promotion")

axs[1,1].plot(employees_by_hometown['growth_rate'])
axs[1,1].set_title("growth_rate")

axs[1,2].plot(employees_by_hometown['Travel_Rate'])
axs[1,2].set_title("Travel_Rate")

axs[2,0].plot(employees_by_hometown['Post_Level'])
axs[2,0].set_title("Post_Level")

axs[2,1].plot(employees_by_hometown['Pay_Scale'])
axs[2,1].set_title("Pay_Scale")

axs[2,2].plot(employees_by_hometown['Work_Life_balance'])
axs[2,2].set_title("Work_Life_balance")

axs[3,0].plot(employees_by_hometown['Attrition_rate'])
axs[3,0].set_title("Attrition_rate")

"""12.	Utiliza el dataframe original (sin los NaN) para analizar el impacto del nivel educativo en la escala de pago. Para ello construye un box plot que considere estas dos variables."""

sns.boxplot(x=employees['Education_Level'], y=employees['Pay_Scale'])
plt.xticks(rotation= 90)

"""13.	Elabora dos scatter plots (del dataframe original sin NaN) para determinar si hay correlación entre:
*   Edad y Tasa de deserción
*   Tiempo de servicio y Tasa de deserción
"""

#Edad y Tasa de desercion
sns.scatterplot(x=employees['Age'],y=employees['Attrition_rate'])

#Tiempo de servicio y Tasa de deserción
sns.scatterplot(x=employees['Time_of_service'],y=employees['Attrition_rate'])

"""14.	Crea un heatmap  (del dataframe original sin NaN) que muestre la correlación entre todos los pares de variables numéricas."""

sns.heatmap(round(employees.corr(),2), annot=True)